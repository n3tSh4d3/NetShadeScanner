#!/bin/python3

# dependency check for the modules
try: 
	import os
	import subprocess
	import sys
	import re
	from colorama import Fore, Back, Style
	import fileinput
	import requests
	from urllib.request import urlopen
	from urllib.error import *
	from datetime import datetime
except ModuleNotFoundError:
	print('run the requirements.txt file to have all the requirements satisfied')



print(Fore.RED + '''


 ______  _______ _______ _______ _______  ______ _ _______ 
(______)(_______|_______|_______|_______)/ _____) (_______)
 _     _ _____   _____   _____   _     _( (____ | |_     _ 
| |   | |  ___) |  ___) |  ___) | |   | |\____ \| | |   | |
| |__/ /| |_____| |     | |_____| |   | |_____) ) | |___| |
|_____/ |_______)_|     |_______)_|   |_(______/|_|\_____/ 
                                                           
                                                                                                                                                                                       
╔═╗┬ ┬┌┬┐┌─┐┌┬┐┌─┐┌┬┐┬┌─┐  ╔═╗┌─┐┌─┐┌┐┌┌┐┌┌─┐┬─┐
╠═╣│ │ │ │ ││││├─┤ │ ││    ╚═╗│  ├─┤││││││├┤ ├┬┘
╩ ╩└─┘ ┴ └─┘┴ ┴┴ ┴ ┴ ┴└─┘  ╚═╝└─┘┴ ┴┘└┘┘└┘└─┘┴└─
	
	''')

print(Fore.GREEN + '''
Autor:
Fidemsrl.it
	''' + Style.RESET_ALL
	)
#print()
# check dependencies

print("Enter the target of the scan: (host or IP)")


# check for index input
try:
	var_1 = input()

except IndexError:
	print('Put a valid switch or use -h switch to see the list of options')


# check for the input
try:
	if (var_1 == '-h'):
		print('Help Menu:')
		print('Run the script as root')
		print('syntax: sudo ./Fidem_nmap <ip>')

		sys.exit() 

except:
	sys.exit()
	
time_string = datetime.now().strftime("%d_%m_%Y_%H_%M_%S")
repDir = "Report_"+var_1+"_at_"+time_string
cmd = subprocess.run(["mkdir",repDir])
f = open("Parsing_file.txt", "a")


def dependency_checks(tool):
	""" Checks the dependencies for the tools that are going to be"""
	try:
		cmd1 = subprocess.Popen([tool],
				stdout=subprocess.PIPE, 
				stderr=subprocess.PIPE)

	except FileNotFoundError:
		print('run the requirements.txt file to have all the requirements satisfied')

R = open("Report.txt", "a")
R.write("Report starting!!!")

####### enter the Network-scanner ########

print("use -Pn option ? (Y/N)")

pn = input()


print("start scan...")


if (pn == 'Y'):
	
	try:
		#SCANNER NP mode
		cmd = subprocess.run(["nmap","-Pn", "-p-", "-T4", var_1,"--append-output","-oN",repDir+"/Nmap_"+var_1], stdout=f)	

	except KeyboardInterrupt:
		sys.exit()		

#else of the scanner if
elif (pn != 'Y'):
	try:
		#SCANNER NP mode
		cmd = subprocess.run(["nmap","-p-", "-T4", var_1,"--append-output","-oN",repDir+"/Nmap_"+var_1], stdout=f)	

	except KeyboardInterrupt:
		sys.exit()	




else:
	print('''[!] whoops!! The script recieved an invalid argument.
		Please check your ip address or use the -h switch to get a list of commands''')
	sys.exit()


f.close() # to support the overwriting functionality

##### OUTPUT THE RESULT IN A FILE TO BE PARSED #####
x = open("Parsing_file.txt")
Parse = x.read()
data = (re.findall(r'[0-9]+/', Parse))
data = [x[:-1] for x in data]
listToStr = ','.join([str(elem) for elem in data])
f.close

print("\n----------------Open Port on "+var_1+"------------------\n")
for x in data:
	print(x)
print("\n-------------------------------------------\n")

try:
	cmd = subprocess.run(["nmap", "-p",listToStr, "-A", "-T4",var_1,"-oX",repDir+"/Nmap_"+var_1+".xml"])
	cmd = subprocess.run(["./nmap-converter.py","-o",repDir+"/Nmap_"+var_1+".xls",repDir+"/Nmap_"+var_1+".xml"])
	
except KeyboardInterrupt:
	sys.exit()



## Output the whole 


##### Additional Menu #####
print("\n")
print(Fore.BLUE + '''
╔═╗┌┐┌┬ ┬┌┬┐┌─┐┬─┐┌─┐┌┬┐┬┌─┐┌┐┌
║╣ ││││ ││││├┤ ├┬┘├─┤ │ ││ ││││
╚═╝┘└┘└─┘┴ ┴└─┘┴└─┴ ┴ ┴ ┴└─┘┘└┘
'''+Style.RESET_ALL)

print(Fore.GREEN+"[*] The next part of the tool will attempt to enumerate the services found in the NMAP scan" + Style.RESET_ALL)
print(Fore.GREEN+"\n [*] You wish to continue (Y/N)"+ Style.RESET_ALL)
MenuFlag = input()
if (MenuFlag == 'Y'):
	q = open("buffer.txt", "w+")
	#web_scanner( var_1 )

	######### Web Tools ##########
	print(Fore.YELLOW+"\n [*] You wish to use Nikto (Y/N)"+ Style.RESET_ALL)
	Nikto_Flag = input()
	if (Nikto_Flag == 'Y'):
		
		#web_scanner( var_1 )

		dependency_checks("nikto")
		print(Fore.GREEN +'''
╔╗╔┬┬┌─┌┬┐┌─┐
║║║│├┴┐ │ │ │
╝╚╝┴┴ ┴ ┴ └─┘
		''' + Style.RESET_ALL)
		
		
		for port  in data:
			if (port=='139'or port=='445'):
				print(Fore.RED+"\n[*] Port "+port+" is not scannable by Nikto\n"+Style.RESET_ALL)
				continue
			print(Fore.YELLOW+"\n[*] execute Nikto on port "+port+" .\n"+Style.RESET_ALL)
			try:
				cmd = subprocess.run(["nikto", "-h", var_1+":"+port,"-Format","txt","-output",repDir+"/nikto_"+var_1+":"+port])
			
		
			except KeyboardInterrupt:
				sys.exit()
				
	print(Fore.YELLOW+"\n [*] You wish to use Wapiti (Y/N)"+Style.RESET_ALL)
	Wapiti_Flag = input()
	if (Wapiti_Flag == 'Y'):
		dependency_checks("wapiti")
		print(Fore.GREEN +'''
╦ ╦┌─┐┌─┐┬┌┬┐┬
║║║├─┤├─┘│ │ │
╚╩╝┴ ┴┴  ┴ ┴ ┴
		''' + Style.RESET_ALL)
	
		
		for port  in data:
			
			try:
				print(Fore.YELLOW+"\n[*] execute Wapiti (HTTP mode) on port "+port+" .\n"+Style.RESET_ALL)
				cmd = subprocess.run(["wapiti","--flush-session","-u", "http://"+var_1+":"+port+"/","-f","txt","-o",repDir+"/wapiti_http_"+var_1+":"+port])
				print(Fore.YELLOW+"\n[*] execute Wapiti (HTTPS mode) on port "+port+" .\n"+Style.RESET_ALL)
				cmd = subprocess.run(["wapiti","--flush-session","-u", "https://"+var_1+":"+port+"/","-f","txt","-o",repDir+"/wapiti_https_"+var_1+":"+port])
			
		
			except KeyboardInterrupt:
				sys.exit()
	
	print(Fore.YELLOW+"\n [*] You wish to use SmbMap (Y/N)"+Style.RESET_ALL)
	Smb_Flag = input()
	if (Smb_Flag == 'Y'):
		print(Fore.GREEN +'''
╔═╗╔╦╗╔╗ ╔╦╗┌─┐┌─┐
╚═╗║║║╠╩╗║║║├─┤├─┘ by emun4linux!
╚═╝╩ ╩╚═╝╩ ╩┴ ┴┴  
			'''+ Style.RESET_ALL)
		print(Fore.YELLOW+"\n[*] Scanning the share:\n"+Style.RESET_ALL)
	## SMB File check
		for port  in data:
			if (port=='139'or port=='445'):
				try:
					enumfile="enum"+var_1
					cmd = subprocess.run(["smbmap", "-H", var_1])
					cmd = subprocess.run(["./enum4linux/enum4linux.pl", var_1], stdout=open(enumfile,'w'))
					print("\n Report enum4linux saved!")
				
				except KeyboardInterrupt:
					sys.exit()


##### Additional Menu NMAP #####
print("\n")
print(Fore.BLUE + '''
╔╗╔╔╦╗╔═╗╔═╗  ╔═╗┌─┐┬─┐┬┌─┐┌┬┐
║║║║║║╠═╣╠═╝  ╚═╗│  ├┬┘│├─┘ │ 
╝╚╝╩ ╩╩ ╩╩    ╚═╝└─┘┴└─┴┴   ┴ 
'''+Style.RESET_ALL)

print(Fore.GREEN+"[*] The next part of the tool will attempt to use NMAP Script" + Style.RESET_ALL)
print(Fore.GREEN+"\n [*] You wish to use Nmap Script (Y/N)"+Style.RESET_ALL)
MenuFlag = input()

if (MenuFlag == 'Y'):
	
		
	try:
		
		print(Fore.YELLOW+"\n Preliminary start Broadcast mode. \n"+Style.RESET_ALL)
		cmd = subprocess.run(["nmap", "--script", "broadcast", var_1,"--append-output","-oN",repDir+"/Nmap_"+var_1])
		
		
		
		print(Fore.YELLOW+"\n [*] You wish to start Discovery mode (Y/N)"+Style.RESET_ALL)
		disc = input()

		if (disc == 'Y'):
			print(Fore.GREEN+"\n Start discovery mode. \n"+Style.RESET_ALL)
			cmd = subprocess.run(["nmap", "--script", "discovery", var_1,"--append-output","-oN",repDir+"/Nmap_"+var_1])
			

		print(Fore.YELLOW+"\n [*] You wish to start Malware mode (Y/N)"+Style.RESET_ALL)
		malw = input()

		if (malw == 'Y'):
			print(Fore.GREEN+"\n Start malware mode. \n"+Style.RESET_ALL)
			cmd = subprocess.run(["nmap", "--script", "malware", var_1,"--append-output","-oN",repDir+"/Nmap_"+var_1])
	        
		print(Fore.YELLOW+"\n [*] You wish to start Exploit mode (Y/N)"+Style.RESET_ALL)
		expl = input()

		if (expl == 'Y'):
			print(Fore.GREEN+"\n Start exploit mode. \n"+Style.RESET_ALL)
			cmd = subprocess.run(["nmap", "--script", "exploit", var_1,"--append-output","-oN",repDir+"/Nmap_"+var_1])
			
		print(Fore.YELLOW+"\n [*] You wish to start Vulns mode (Y/N)"+Style.RESET_ALL)
		vuln = input()

		if (vuln == 'Y'):
			print(Fore.GREEN+"\n Start Vuln mode. \n"+Style.RESET_ALL)
			cmd = subprocess.run(["nmap", "--script", "vuln", var_1,"--append-output","-oN",repDir+"/Nmap_"+var_1])
			cmd = subprocess.run(["nmap","-sV", "--script=vulscan/vulscan.nse", var_1,"--append-output","-oN",repDir+"/Nmap_"+var_1])
			      
	except KeyboardInterrupt:
		sys.exit()
	
	
else:
	print("Goodbye!!")




print("cleaning up!!")
try:
	os.remove("Parsing_file.txt")
	os.remove("buffer.txt")
		
		
except:
	sys.exit()	
	#cmd = subprocess.run(["nikto", "-h", var_1,":","80"])
	## any custom ports
	## go buster
	## A file will be created by the name of Report.txt that will have all the open services listed.!!
	## Logic: if port in list then use the expoitation tools within the distro
